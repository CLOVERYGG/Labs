import itertools
import timeit

def generate_permutations_algorithmic(numbers):
    result = []
    n = len(numbers)
    
    def backtrack(path, used):
        if len(path) == n:
            result.append(tuple(path))
            return
        for i in range(n):
            if not used[i]:
                used[i] = True
                path.append(numbers[i])
                backtrack(path, used)
                path.pop()
                used[i] = False

    backtrack([], [False]*n)
    return result

def generate_permutations_itertools(numbers):
    return list(itertools.permutations(numbers))

def main():
    numbers = list(map(int, input("Введите числа через пробел: ").split()))

    start = timeit.default_timer()
    perms_alg = generate_permutations_algorithmic(numbers)
    end = timeit.default_timer()
    time_alg = (end - start) * 1000
    start = timeit.default_timer()
    perms_it = generate_permutations_itertools(numbers)
    end = timeit.default_timer()
    time_it = (end - start) * 1000

    print(f"\nАлгоритмический способ - всего перестановок: {len(perms_alg)}")
    for p in perms_alg:
        print(p)
    print(f"\nitertools способ - всего перестановок: {len(perms_it)}")
    for p in perms_it:
        print(p)
    print(f"\nВремя алгоритмического способа: {time_alg:.6f} мс")
    print(f"Время itertools способа: {time_it:.6f} мс")

if __name__ == "__main__":
    main()
