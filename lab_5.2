import itertools
import timeit

def generate_permutations_algorithmic(numbers):
    result = []
    n = len(numbers)

    def backtrack(path, used):
        if len(path) == n:
            result.append(tuple(path))
            return

        if len(path) == 0:
            if 1 in numbers:
                one_index = numbers.index(1)  
                if not used[one_index]:
                    used[one_index] = True
                    path.append(1)
                    backtrack(path, used)
                    path.pop()
                    used[one_index] = False
            return 

        for i in range(n):
            if not used[i]:
                used[i] = True
                path.append(numbers[i])
                backtrack(path, used)
                path.pop()
                used[i] = False
    backtrack([], [False]*n)
    return result

def generate_permutations_itertools(numbers):
    if 1 not in numbers:
        return [] 
    perms = list(itertools.permutations(numbers))
    return [p for p in perms if p[0] == 1]

def calculate_sum_of_differences(permutation):
    total_difference = 0
    for i in range(len(permutation) - 1):
        total_difference += abs(permutation[i] - permutation[i+1])
    return total_difference

def main():
    numbers = list(map(int, input("Введите числа через пробел: ").split()))

    start = timeit.default_timer()
    perms_alg = generate_permutations_algorithmic(numbers)
    end = timeit.default_timer()
    time_alg = (end - start) * 1000

    start = timeit.default_timer()
    perms_it = generate_permutations_itertools(numbers)
    end = timeit.default_timer()
    time_it = (end - start) * 1000

    print(f"\nАлгоритмический способ - всего перестановок, начинающихся с 1: {len(perms_alg)}")
    for p in perms_alg: 
        print(p)
    print(f"\nitertools способ - всего перестановок, начинающихся с 1: {len(perms_it)}")
    for p in perms_it: 
        print(p)
    print(f"\nВремя алгоритмического способа: {time_alg:.6f} мс")
    print(f"Время itertools способа: {time_it:.6f} мс")
    if perms_alg:
        best_permutation_alg = max(perms_alg, key=calculate_sum_of_differences)
        max_difference_sum_alg = calculate_sum_of_differences(best_permutation_alg)
        print(f"\nАлгоритмический способ - Перестановка с максимальной суммой разностей: {best_permutation_alg}, Сумма разностей: {max_difference_sum_alg}")

    if perms_it:
        best_permutation_it = max(perms_it, key=calculate_sum_of_differences)
        max_difference_sum_it = calculate_sum_of_differences(best_permutation_it)
        print(f"itertools способ - Перестановка с максимальной суммой разностей: {best_permutation_it}, Сумма разностей: {max_difference_sum_it}")

if __name__ == "__main__":
    main()
