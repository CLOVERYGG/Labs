import random
import timeit
from itertools import product

algo_nodes = 0
pruned_nodes = 0

def generate_algo(nums):
    global algo_nodes
    k = len(nums)
    combos = []
    def dfs(pos, buf):
        global algo_nodes
        algo_nodes += 1
        if pos == k:
            combos.append(tuple(buf))
            return
        for x in nums:
            buf.append(x)
            dfs(pos + 1, buf)
            buf.pop()
    dfs(0, [])
    return combos

def generate_pruned(nums, attr, T_w): # 5.2
    k = len(nums)
    w_max = max(attr.values())
    w_min = min(attr.values())
    result = []
    def dfs(pos, buf, curr_w):
        global pruned_nodes
        pruned_nodes += 1
        if pos == k:
            if curr_w == T_w:
                result.append(tuple(buf))
            return
        rem = k - pos
        if curr_w + rem * w_max < T_w or curr_w + rem * w_min > T_w: 
            return
        for x in nums:
            buf.append(x)
            dfs(pos + 1, buf, curr_w + attr[x])
            buf.pop()
    dfs(0, [], 0)
    return result

def unique_list(lst):
    seen = set()
    uniq = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            uniq.append(item)
    return uniq

def main():
    global algo_nodes

    K = int(input("Введите K (длину кортежей и количество чисел): "))
    nums = [random.randint(0, 9) for _ in range(K)]
    print(f"Сгенерированные числа: {nums}")

    algo_nodes = 0
    t_algo = timeit.timeit(lambda: generate_algo(nums), number=1)
    combos = generate_algo(nums)
    print("\n=== Алгоритмический метод ===")
    print(f"Узлов посещено: {algo_nodes}")
    print("Первые 5 комбинаций:")
    for c in combos[:5]:
        print(c)
    print(f"Время: {t_algo:.6f} сек")

    t_py = timeit.timeit(lambda: list(product(nums, repeat=K)), number=1)
    py_combos = list(product(nums, repeat=K))
    print("\n=== Метод itertools.product ===")
    print("Первые 5 комбинаций:")
    for c in py_combos[:5]:
        print(c)
    print(f"Время: {t_py:.6f} сек")

    attr = {x: random.randint(1, 10) for x in set(nums)} 
    print("\nАтрибуты (вес) для каждого числа:")
    for x, w in attr.items():
        print(f"  {x} → {w}")

    coeffs = [2 ** (1 - i) for i in range(K)] 
    print("\nПозиционные коэффициенты:") 
    for i, c in enumerate(coeffs):
        print(f"  индекс {i} → {c}")

    all_sums = {sum(attr[x] for x in combo) for combo in combos} 
    T_w = random.choice(sorted(all_sums)) 
    print(f"\nЦелевая сумма весов T_w = {T_w}")

    pruned_nodes = 0
    pruned = generate_pruned(nums, attr, T_w)
    pruned_unique = unique_list(pruned)
    print(f"\nНовых кортежей: {len(pruned_unique)}")

    print("\nПервые уникальные кортежи (до 10) и их вес:")
    for t in pruned_unique[:10]:
        score = sum(attr[x] * coeffs[i] for i, x in enumerate(t))
        print(f"{t}  — вес {score:.2f}")

    best = max(pruned_unique, key=lambda t: sum(attr[x] * coeffs[i] for i, x in enumerate(t)))
    best_score = sum(attr[x] * coeffs[i] for i, x in enumerate(best))
    print(f"\nЛучший кортеж: {best}  — вес {best_score:.2f}")

if __name__ == "__main__":
    main()
