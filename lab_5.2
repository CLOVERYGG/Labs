import random
import math
import timeit
from itertools import product

def generate_algo(nums):
    k = len(nums)
    combos = []
    def dfs(pos, buf):
        if pos == k:
            combos.append(tuple(buf))
            return
        for x in nums:
            buf.append(x)
            dfs(pos + 1, buf)
            buf.pop()
    dfs(0, [])
    return combos

def generate_py(nums):
    return list(product(nums, repeat=len(nums)))

def unique_list(lst):
    seen = set()
    uniq = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            uniq.append(item)
    return uniq

def main():
    K = int(input("Введите K (длину кортежей и количество чисел): "))
    nums = [random.randint(0, 9) for _ in range(K)]
    print(f"Сгенерированные числа: {nums}")

    algo_time = timeit.timeit(lambda: generate_algo(nums), number=1)
    algo_combos = generate_algo(nums)
    print("\n=== Алгоритмический метод ===")
    print(f"Всего комбинаций: {len(algo_combos)}")
    print("Первые 5 комбинаций:")
    for combo in algo_combos[:5]:
        print(combo)
    print(f"Время выполнения: {algo_time:.6f} сек")
    py_time = timeit.timeit(lambda: generate_py(nums), number=1)
    py_combos = generate_py(nums)
    print("\n=== Метод itertools.product ===")
    print(f"Всего комбинаций: {len(py_combos)}")
    print("Первые 5 комбинаций:")
    for combo in py_combos[:5]:
        print(combo)
    print(f"Время выполнения: {py_time:.6f} сек")

    faster = "алгоритмический" if algo_time < py_time else "itertools.product"
    print(f"\nБолее быстрый метод: {faster}")

    attr = {x: random.randint(1, 10) for x in set(nums)}
    print("\nАтрибуты (вес) для каждого числа:")
    for x, w in attr.items():
        print(f"  число {x} → вес {w}")

    coeffs = [2 ** (1 - i) for i in range(K)]
    print("\nПозиционные коэффициенты:")
    for i, c in enumerate(coeffs):
        print(f"  индекс {i} → {c}")

    weight_sums = [sum(attr[x] for x in t) for t in algo_combos]
    possible_sums = sorted(set(weight_sums))
    T_w = random.choice(possible_sums)
    print(f"\nЦелевая сумма весов (из достижимых) T_w = {T_w}")

    filtered = unique_list([t for t in algo_combos if sum(attr[x] for x in t) == T_w])
    total = len(algo_combos)
    reduced = len(filtered)
    print(f"\nОтобрано уникальных кортежей: {reduced} из {total} ({100 * (1 - reduced/total):.2f}% сокращено)")

    print("\nПервые 10 уникальных отобранных кортежей и их вес:")
    for t in filtered[:10]:
        weight = sum(attr[x] * coeffs[i] for i, x in enumerate(t))
        print(f"{t}  — вес {weight:.2f}")

    best = None
    best_score = -math.inf
    for t in filtered:
        score = sum(attr[x] * coeffs[i] for i, x in enumerate(t))
        if score > best_score:
            best_score = score
            best = t

    print(f"\nЛучший кортеж: {best}  — взвешенный вес {best_score:.2f}")

if __name__ == "__main__":
    main()
