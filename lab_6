import math
import timeit
import matplotlib.pyplot as plt

def F_rec(n):
    if n == 1:
        return 1
    else:
        return (-1)**n * (F_rec(n-1) - 2 * G_rec(n-1))

def G_rec(n):
    if n == 1:
        return 1
    else:
        return -F_rec(n-1) + math.factorial(2 * n)

def F_iter(n):
    if n == 1:
        return 1
    F_values = [0] * (n+1)
    G_values = [0] * (n+1)
    F_values[1] = 1
    G_values[1] = 1
    for i in range(2, n+1):
        F_values[i] = (-1)**i * (F_values[i-1] - 2 * G_values[i-1])
        G_values[i] = -F_values[i-1] + math.factorial(2 * n)
    return F_values[n]
def G_iter(n):
    if n == 1:
        return 1
    F_values = [0] * (n+1)
    G_values = [0] * (n+1)
    F_values[1] = 1
    G_values[1] = 1
    for i in range(2, n+1):
        F_values[i] = (-1)**i * (F_values[i-1] - 2 * G_values[i-1])
        G_values[i] = -F_values[i-1] + math.factorial(2 * n)
    return G_values[n]

def main():
    n = int(input("Введите N: "))
    results = {
        'n': list(range(1, n+1)),
        'F_rec': [],
        'G_rec': [],
        'F_iter': [],
        'G_iter': [],
        'time_F_rec': [],
        'time_G_rec': [],
        'time_F_iter': [],
        'time_G_iter': []
    }
    for i in results['n']:
        start = timeit.default_timer()
        val_F_rec = F_rec(i)
        end = timeit.default_timer()
        results['F_rec'].append(val_F_rec)
        results['time_F_rec'].append((end - start) * 1000)
        start = timeit.default_timer()
        val_G_rec = G_rec(i)
        end = timeit.default_timer()
        results['G_rec'].append(val_G_rec)
        results['time_G_rec'].append((end - start) * 1000)
        start = timeit.default_timer()
        val_F_iter = F_iter(i)
        end = timeit.default_timer()
        results['F_iter'].append(val_F_iter)
        results['time_F_iter'].append((end - start) * 1000)
        start = timeit.default_timer()
        val_G_iter = G_iter(i)
        end = timeit.default_timer()
        results['G_iter'].append(val_G_iter)
        results['time_G_iter'].append((end - start) * 1000)

    print(f"\n{'n':<5}{'F_rec':<20}{'G_rec':<20}{'F_iter':<20}{'G_iter':<20}"
          f"{'t_F_rec(ms)':<15}{'t_G_rec(ms)':<15}{'t_F_iter(ms)':<15}{'t_G_iter(ms)':<15}")
    for i in range(n):
        print(f"{results['n'][i]:<5}"
              f"{results['F_rec'][i]:<20}"
              f"{results['G_rec'][i]:<20}"
              f"{results['F_iter'][i]:<20}"
              f"{results['G_iter'][i]:<20}"
              f"{results['time_F_rec'][i]:<15.6f}"
              f"{results['time_G_rec'][i]:<15.6f}"
              f"{results['time_F_iter'][i]:<15.6f}"
              f"{results['time_G_iter'][i]:<15.6f}")
    plt.figure(figsize=(12, 6))
    plt.plot(results['n'], results['time_F_rec'], 'r-', label='F рекурсия')
    plt.plot(results['n'], results['time_F_iter'], 'r--', label='F итерация')
    plt.plot(results['n'], results['time_G_rec'], 'b-', label='G рекурсия')
    plt.plot(results['n'], results['time_G_iter'], 'b--', label='G итерация')
    plt.title('Сравнение времени вычисления функций F и G')
    plt.xlabel('n')
    plt.ylabel('Время (мс)')
    plt.legend()
    plt.grid (True)
    plt.show()
if __name__ == "__main__":
    main()
